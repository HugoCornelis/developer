#!/usr/bin/perl -w

use strict;

use warnings;


our $global_configuration;


package Command;


my $color_help = '
https://linux.101hacks.com/ps1-examples/prompt-color-using-tput/

tput Color Capabilities:

    tput setab [1-7] – Set a background color using ANSI escape
    tput setb [1-7] – Set a background color
    tput setaf [1-7] – Set a foreground color using ANSI escape
    tput setf [1-7] – Set a foreground color

tput Text Mode Capabilities:

    tput bold – Set bold mode
    tput dim – turn on half-bright mode
    tput smul – begin underline mode
    tput rmul – exit underline mode
    tput rev – Turn on reverse mode
    tput smso – Enter standout mode (bold on rxvt)
    tput rmso – Exit standout mode
    tput sgr0 – Turn off all attributes

Color Code for tput:

black=$(tput setaf 0)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)

# give IP addresses prefixed with "addr:" a yellow color:

$ project-workflow ip_routing all | sed -E "s|addr:([0-9]+.[0-9]+.[0-9]+.[0-9]+)|addr:${yellow}\1${white}|g"
';


sub heccer_build_manual
{
    my $commands
	= [
	   "chdir $ENV{HOME}/projects/heccer/source/snapshots/master",
	   "neurospaces_harness --tags manual --output-pdf --output-figures --verbose",
	  ];

    execute_shell_command_array($commands);
}


sub heccer_build_manual_visual
{
    heccer_build_manual();

    heccer_manual_visual();
}


sub heccer_manual_visual
{
    my $commands
	= [
	   "okular /tmp/test_report_heccer/test_report_heccer_command_definition-command_test-meta-module.pdf &",
	  ];

    execute_shell_command_array($commands);
}


sub ip_routing_all
{
    ip_routing_developer_laptop();
}


sub ip_routing_developer_laptop
{
    my $commands
	= [
	   "netstat -rn",
	  ];

    execute_shell_command_array($commands);
}


sub ssp_build_manual
{
    my $commands
	= [
	   "chdir $ENV{HOME}/projects/ssp/source/snapshots/master",
	   "neurospaces_harness --tags manual --output-pdf --output-figures --verbose",
	  ];

    execute_shell_command_array($commands);
}


sub ssp_build_manual_visual
{
    ssp_build_manual();

    ssp_manual_visual();
}


sub ssp_manual_visual
{
    my $commands
	= [
	   "okular /tmp/test_report_ssp/test_report_ssp_command_definition-command_test-meta-module.pdf &",
	  ];

    execute_shell_command_array($commands);
}


($0 =~ m(.*/(\S+)));

my $program_name = $1;


if ($program_name =~ m'commands$')
{
    # could possibly do something sensible with Devel::Symdump here

    # choose one of 'Data::Dumper', 'yaml', 'json', 'json_pretty'

    my $output_format = 'default';

    if ($output_format eq 'yaml')
    {
	require YAML;

	# print YAML::Dump($configuration);
    }
    elsif ($output_format eq 'json')
    {
	require JSON;

        my $json = JSON->new(); # ->allow_nonref;

	$json->allow_unknown(1);

	# my $encoded = $json->encode($configuration);

	# print $encoded;
    }
    elsif ($output_format eq 'json_pretty')
    {
	require JSON;

        my $json = JSON->new(); # ->allow_nonref;

	$json->allow_unknown(1);

	# my $encoded = $json->pretty()->encode($configuration);

	# print $encoded;
    }
    else
    {
	require Data::Dumper;

	no warnings;

	$Data::Dumper::Sortkeys = 'always';

	# print Data::Dumper::Dumper($configuration);
    }
}
else
{
    # return $configuration;
}


# return success

1;


