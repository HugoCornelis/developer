#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#


use strict;


use Getopt::Long;

use Glib qw/TRUE FALSE/;

use Gtk2 '-init';
use Gtk2::Helper;
use Gtk2::SimpleList;

use YAML;


our $option_verbose = '';

our $gtk2_repository_list;
our $tooltips = Gtk2::Tooltips->new();
our $repository_tags;

sub unique(@);


$SIG{'__DIE__'}
    = sub
      {
	  use Carp;

	  print STDERR Carp::longmess(@_);

	  exit 1;
      };


$SIG{'INT'}
    = sub
      {
	  exit 1;
      };


sub main
{
    read_cmd_line();

    my $packages_text = `neurospaces_packages`;

    if ($@)
    {
	print STDERR "$0: *** Error: cannot find package information, does the 'neurospaces_packages' command work correctly?";

	exit 1;

    }

    my $packages = YAML::Load($packages_text);

    my $repositories_text = `neurospaces_repositories`;

    if ($@)
    {
	print STDERR "$0: *** Error: cannot find package information, does the 'neurospaces_repositories' command work correctly?";

	exit 1;

    }

    my $repositories = YAML::Load($repositories_text);

    $repositories = [ %$repositories, ];

    $repositories = [ @{$repositories->[1]->{repositories}}, ];

    my $tags = [];

    foreach my $repository (@$repositories)
    {
	$tags = [ @$tags, @{$repository->{tags} || []}, ];
    }

    $repository_tags = [ unique sort @$tags, ];

    $repository_tags
	= {
	   map
	   {
	       $_ => {},
	   }
	   @$repository_tags,
	  };

    window_create();

}


sub read_cmd_line
{
    my $option_help;
    my $option_version;

    my $result
	= GetOptions
	    (
	     "help!" => \$option_help,
	     "v|verbose+" => \$option_verbose,
	     "version" => \$option_version,
	    );

    if ($option_version)
    {
	my $version = version();

	print $version . "\n";

	exit 1;
    }

    if ($option_help || @ARGV ne 0)
    {
	print
	    "
$0 <options>

$0: GUI frontend to the scripts of the Neurospaces developer package.

options :
    --help                   print usage information.
    --verbose                set verbosity level.
    --version                give version information.
";

	exit 1;
    }
}


sub repositories_list
{
    my $active_tags = [];

    foreach my $repository_tag (keys %$repository_tags)
    {
	if ($repository_tags->{$repository_tag}->{checkbox}->get_active())
	{
	    push @$active_tags, $repository_tag;
	}
    }

    if (scalar @$active_tags)
    {
    }
    else
    {
	push @$active_tags, "ZZZ";
    }

    my $command = "neurospaces_repositories " . (join ' ', map  { '--package-tags "' . $_ . '"' } @$active_tags);

    print "$command\n";

    my $repositories_text = `$command`;

    if ($@)
    {
	print STDERR "$0: *** Error: cannot find package information, does the 'neurospaces_repositories' command work correctly?";

	exit 1;

    }

#     use Data::Dumper;

#     print Dumper($repositories_text);

    my $repositories = YAML::Load($repositories_text);

    $repositories = [ %$repositories, ];

    $repositories = [ @{$repositories->[1]->{repositories}}, ];

    @{$gtk2_repository_list->{data}} = ();

    foreach my $repository (@$repositories)
    {
	push
	    @{$gtk2_repository_list->{data}},
		[
		 $repository->{package},
		];
    }

}


sub repository_list_cursor_changed
{
    my ($widget) = @_;

    my $cursor = $widget->get_cursor();

    my $selection = $widget->get_selection();

    my $rows = [ $selection->get_selected_rows(), ];

    #! index '0' means first selected row, we select one row at most...

    my $row = $rows->[0];

    if ($row)
    {
	my $indices = [ $row->get_indices(), ];

	#! index '0', see above...

	my $index = $indices->[0];

# 	my $selected = $widget->{data}->[$index]->[$self->{serial_column}];

# 	my $current = $self->{this} + $selected;

# 	print "Parameters for symbol $current\n";

# 	my $current_symbol = Neurospaces::GUI::Components::Node::factory( { serial => $current, studio => $self->{studio}, }, );

# 	print YAML::Dump( { current_symbol => $current_symbol, }, );

# 	my $specific_parameters = $current_symbol->get_specific_parameters($current);

# 	my $textbuffer_specific_parameters = $self->{gtk2_textbuffer_specific_parameters};

# 	$textbuffer_specific_parameters->set_text(YAML::Dump( { 'specific parameters' => $specific_parameters, }, ));

# 	my $parameters = $self->get_parameters($current);

# 	my $textbuffer_parameters = $self->{gtk2_textbuffer_parameters};

# 	$textbuffer_parameters->set_text(YAML::Dump($parameters));
    }
}


sub repository_list_row_activated
{
    my ($widget, $path, $column) = @_;

    my $row_ref = $widget->get_row_data_from_path($path);

#     my $selected = $row_ref->[$self->{serial_column}];

#     my $current = $self->{this} + $selected;

#     print "Exploring symbol $current\n";

#     my $child = Neurospaces::GUI::Components::Node::factory({ serial => $current, studio => $self->{studio}, }, );

#     $child->explore();
}


sub unique(@)
{
    return unless defined wantarray;  # void context, do nothing

    my $array = [ sort @_, ];

    my $hash
	= {
	   map
	   {
	       $_ => 1,
	   }
	   @$array,
	  };

    return (keys %$hash);
}


sub version
{
    # $Format: "    my $version=\"${package}-${label}\";"$
    my $version="ns-gui-alpha";

    return $version;
}


sub window_create
{
    my $window = Gtk2::Window->new('toplevel');

    $window->set_title("Neurospaces Developer Management Console");

    $window->set_default_size(800, 300);

    # When the window is given the "delete_event" signal (this is given
    # by the window manager, usually by the "close" option, or on the
    # titlebar), we ask it to call the delete_event () functio
    # as defined above. No data is passed to the callback function.
    $window->signal_connect
	(
	 delete_event =>
	 sub
	 {
	     $window->destroy();

	     Gtk2->main_quit();
	 },
	);

#     # Here we connect the "destroy" event to a signal handler.
#     # This event occurs when we call Gtk2::Widget::destroy on the window,
#     # or if we return FALSE in the "delete_event" callback. Perl supports
#     # anonymous subs, so we can use one of them for one line callbacks.
#     $window->signal_connect(destroy => sub { Gtk2->main_quit(); });

    # Sets the border width of the window.
    $window->set_border_width(10);

    my $hbox = Gtk2::HBox->new();

    $window->add($hbox);

    # left: tag check boxes

    my $vbox_tags = Gtk2::VBox->new (0, 6);

    $hbox->pack_start($vbox_tags, 0, 1, 0);

    my $label_tags = Gtk2::Label->new("Available Tags");

    my $tooltip_tags = "tags found on your system";

    $tooltips->set_tip($label_tags, $tooltip_tags);

    $vbox_tags->pack_start($label_tags, 0, 1, 0);

    foreach my $tag (sort keys %$repository_tags)
    {
	my $checkbox = Gtk2::CheckButton->new($tag);

# 	$checkbox->signal_connect
# 	    (
# 	     clicked =>
# 	     sub
# 	     {
# 		 my $self = shift;

# 		 print "relisting repos\n";
# 	     },
# 	     $checkbox,
# 	    );

	$checkbox->set_active(1);

	$checkbox->signal_connect
	    (
	     toggled =>
	     sub
	     {
		 my $self = shift;

		 repositories_list();
	     },
	     $checkbox,
	    );

	$repository_tags->{$tag}->{checkbox} = $checkbox;

	my $tooltip = "include all repositories with tag $tag";

	$tooltips->set_tip($checkbox, $tooltip);

	$vbox_tags->pack_start($checkbox, 0, 1, 0);
    }

    # aside the tag checkboxes: available repositories

    my $vbox_repositories = Gtk2::VBox->new(0, 6);

    $hbox->pack_start($vbox_repositories, 1, 1, 0);

    my $label_repositories = Gtk2::Label->new("Available Repositories");

    my $tooltip_repositories = "repositories found on your system
satisfying one or more of the selected tags";

    $tooltips->set_tip($label_repositories, $tooltip_repositories);

    $vbox_repositories->pack_start($label_repositories, 0, 1, 0);

    my $list_scroller = Gtk2::ScrolledWindow->new();

    $list_scroller->set_policy(qw/automatic automatic/);

    $vbox_repositories->pack_start($list_scroller, 1, 1, 0);

    my $list
	= Gtk2::SimpleList->new
	    (
	     'Name' => 'text',
	    );

    $gtk2_repository_list = $list;

    $list->get_selection()->set_mode('extended');

    $list_scroller->add($list);

    $list->signal_connect
	(
	 row_activated => sub { repository_list_row_activated(@_); },
	);

    $list->signal_connect
	(
	 cursor_changed => sub { repository_list_cursor_changed(@_); },
	);

    # right from the available repositories: command buttons

    my $vbox_operations = Gtk2::VBox->new (0, 6);

    $hbox->pack_start($vbox_operations, 0, 1, 0);

    my $operations_label = Gtk2::Label->new("Operations");

    my $tooltip = "run operations on selected packages";

    $tooltips->set_tip($operations_label, $tooltip);

    $vbox_operations->pack_start($operations_label, 0, 1, 0);

    foreach my $operation (
			 qw(
			       upgrade
			       pull
			       sync
			       clean
			       update
			       configure
			       install
			       check
			       dev_uninstall
			       serve
			 )
			)
    {
	my $button = Gtk2::Button->new($operation);

	$button->signal_connect
	    (
	     clicked =>
	     sub
	     {
		 my $self = shift;

		 my $operation = shift;

		 my $selection = $gtk2_repository_list->get_selection();

		 my $rows = [ $selection->get_selected_rows(), ];

		 my $indices = [ map { $_->get_indices(), } @$rows, ];

		 my $packages = [ map { $gtk2_repository_list->{data}->[$_]->[0], } @$indices, ];

# 		 use Data::Dumper;

# 		 print Dumper($packages);

		 my $command = "neurospaces_$operation " . (join ' ', @$packages) . "\n";

		 print "$command\n";

		 my $output = `$command >/tmp/output 2>&1 &`;

		 if ($@)
		 {
		     print STDERR "$0: *** Error: $@\n";

		     print STDOUT "$0: *** Error: $@\n";
		 }
		 else
		 {
		     print STDOUT "$0: *** Ok\n";
		 }

		 system "tail -f /tmp/output &";
	     },
 	     $operation,
	    );

	my $tooltip = "run operation neurospaces_$operation";

	$tooltips->set_tip($button, $tooltip);

	$vbox_operations->pack_start($button, 0, 1, 0);
    }

    # global initialization

    $tooltips->enable();

    $window->show_all();

    repositories_list();

    Gtk2->main();
}


main();


