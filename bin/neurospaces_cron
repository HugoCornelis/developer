#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#


use strict;


use Getopt::Long;

use YAML;


my $installer_directory = "$ENV{HOME}/neurospaces_project/installer/source/snapshots/0";

my $output_filename = "/tmp/neurospaces_cron.stdout";


sub check_and_prepare
{
    # check if the installer is ok

    system "mkdir -p $installer_directory";

    chdir($installer_directory);

    # we assume that there is already an installer repository

    #t wrong assumption

    system "mtn co --db ~/neurospaces_project/MTN/neurospaces-developer.mtn --branch 0 .";

    # install the installer

    install_installer();

}


sub check_user_id
{
    # get effective user id

    my $num_id = $>;

    # convert to ascii representation

    my $passwd_database = [ `cat /etc/passwd`, ];

    # split into fields

    my $records = [ map { [ split ":", $_ ], } @$passwd_database, ];

    # only those records with the numerical id under which this script runs

    $records = [ grep { $_->[2] == $num_id } @$records, ];

    # if not exactly one record left

    if (scalar @$records ne 1)
    {
	report_error("check_user_id()", "$0 cannot determine username under which we are running");

	# just to make sure that this script stops we die

	die "check_user_id()" . "$0 cannot determine username under which we are running";
    }

    # get name of this user

    my $fields = $records->[0];

    my $label_id = $fields->[0];

    # if matches with neurospaces

    #t switched off for convenience, although should make it to the real thing again.

    if (1 || $label_id =~ /neurospaces/)
    {
	# ok, continue
    }

    # else

    else
    {
	report_error("check_user_id()", "$0 must not be executed by a regular user (now running as unprivileged user $label_id)");

	# just to make sure that this script stops we die

	die "check_user_id()" . "$0 must not be executed by a regular user";
    }
}


sub main
{
    # this script can only be run by a user whose name matches 'neurospaces'

    check_user_id();

    # unlink the output file

    unlink($output_filename);

    chdir("/tmp");

    # preparatory startup procedure to check this system

    check_and_prepare();

    # prepare an initial directory layout

    try_to("neurospaces_create_directories");

    # pull code from the repositories

    try_to("neurospaces_pull");

    # uninstall what was installed

    try_to("neurospaces_uninstall");

    install_installer();

    # update the source code in the worspaces

    try_to("neurospaces_update");

    # loop over all the configurations we want to test

    foreach my $configuration (1)
    {
	#t insert configuration options in the configurator package

	# configure all packages

	try_to("neurospaces_configure");

	# install without check

	try_to("neurospaces_install");

	# uninstall again

	try_to("neurospaces_uninstall");

	install_installer();

	# check with install

	try_to("neurospaces_check");

	# uninstall again

	try_to("neurospaces_uninstall");

	install_installer();

	#t now download from sourceforge, configurator defines what release to download

	#t install, uninstall, check, uninstall
    }

    #t remove the entire neurospaces_project directory ?

#     try_to("rm -fr $ENV{HOME}/neurospaces_project");
}


sub install_installer
{
    chdir($installer_directory);

    try_to("./autogen.sh && ./configure && make && sudo make install");
}


sub report_error
{
    my $command = shift;

    my $error_code = shift;

    #t send emails

    die "$0: $command returned $error_code";
}


sub try_to
{
    my $command = shift;

    print "---\n";
    print "$0: trying to $command\n";

    my $output = `$command >>$output_filename 2>&1`;

    if ($?)
    {
	report_error($command, $?);
    }
}


main();


