#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#


use strict;


use Getopt::Long;

use YAML;


$SIG{'INT'}
    = sub
      {
	  # we try to reinstall the developer package in case we were interrupted when uninstalling it

	  install_developer();
      };


my $option_clean;
my $option_configure = 1;
my $option_developer = 1;
my $option_disable;
my $option_enable;
my $option_regex_selector;
my $option_repo_pull = 'default';
my $option_mac_universal;
my $option_verbose;

{
    my $result
	= GetOptions
	    (
	     "clean!" => \$option_clean,
	     "configure!" => \$option_configure,
	     "developer!" => \$option_developer,
	     "disable=s" => \$option_disable,
	     "enable=s" => \$option_enable,
	     "regex-selector=s" => \$option_regex_selector,
	     "repo-pull=s" => \$option_repo_pull,
	     "universal!" => \$option_mac_universal,
	     "v|verbose+" => \$option_verbose,
	    );

    if (!$result)
    {
	die "$0: *** Error: Error in option processing";
    }
}

my $clean_options = defined $option_clean ? "--clean " x $option_clean : '';
my $configure_options = $option_configure ? "--configure " x $option_configure : '--no-configure';
my $verbose_options = defined $option_verbose ? "--verbose " x $option_verbose : '';
my $developer_options = defined $option_developer ? "--developer " x $option_developer : '';
my $regex_options = defined $option_regex_selector ? "--regex '$option_regex_selector' " : '';
my $enable_options = defined $option_enable ? "--enable $option_enable " : '';
my $disable_options = defined $option_disable ? "--disable '$option_disable' " : '';
my $mac_options = defined $option_mac_universal ? "--universal" : '';

# uninstall: must not be run with configure because that may attempt to uninstall newly added files.

system "neurospaces_dev_uninstall $clean_options $mac_options $verbose_options $developer_options $regex_options $enable_options $disable_options";

# note: the following three invocations are copied from neurospaces_uninstall, neurospaces_pull, neurospaces_install, the subs are copied from neurospaces_cron

# pull new code to repos

system "neurospaces_build --repo-pull $option_repo_pull --no-installed-versions --no-configure --no-install --no-compile $verbose_options $developer_options $regex_options $enable_options $disable_options";

# create directories for new packages

system "neurospaces_build --no-configure --no-compile --no-install --no-installed-versions $verbose_options $developer_options $regex_options $enable_options $disable_options --directories-create";

# checkout from repos to workspaces

system "neurospaces_build --no-configure --no-install --no-compile --repo-co --no-installed-versions $verbose_options $developer_options $regex_options $enable_options $disable_options";

# optional clean, optional configure, compile, install

system "neurospaces_build $clean_options $configure_options $mac_options --no-installed-versions $verbose_options $developer_options $regex_options $enable_options $disable_options";


sub install_developer
{
    my $developer_directory = "$ENV{HOME}/neurospaces_project/developer/source/snapshots/0";

    chdir($developer_directory);

    try_to("./autogen.sh && ./configure && make && sudo make install");
}


sub try_to
{
    my $command = shift;

    my $no_verbose = shift;

    my $allow_fail = shift;

    if (!$no_verbose)
    {
	print "---\n";
	print "$0: trying to $command\n";
    }

#     my $output_path = $option_output_directory . "/" . $output_filename;

#     #! $command executed in a subshell such that redirection applies
#     #! to all commands.

#     system "( $command ) >>$output_path 2>&1";

    system "( $command )";

    if ($?)
    {
	if ($allow_fail)
	{
# 	    system "echo >>$output_path 2>&1 failed with $?: $command\n";

	    system "echo failed with $?: $command\n";
	}
	else
	{
	    report_error($command, $?);

	    die "$0: $command returned $?";
	}
    }
}


