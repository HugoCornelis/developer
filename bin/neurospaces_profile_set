#!/usr/bin/perl -w -d:ptkdb
#!/usr/bin/perl
#!/usr/bin/perl -w -d:ptkdb
#


use strict;


use Data::Utilities;

use Getopt::Long;

use Neurospaces::Developer;

use YAML;


$SIG{'__DIE__'}
    = sub
      {
	  use Carp;

	  print STDERR Carp::longmess(@_);

	  exit 1;
      };


$SIG{'INT'}
    = sub
      {
	  use Carp;

	  print STDERR Carp::longmess(@_);

	  exit 1;
      };


# options

my $option_client;
my $option_output_filename = "/tmp/neurospaces_profile.log";
my $option_profile_add = [];
my $option_profile_directory = "/etc/neurospaces/";
my $option_profile_remove = [];
my $option_verbose = 0;


my $global_profile_configuration;

my $default_developer_profile_configuration
    = YAML::Load('
---
profile:
  serves_repos: 0
  runs_cron: 0
  configured_tags:
    genesis3: developer
');

my $default_server_profile_configuration
    = YAML::Load('
---
profile:
  serves_repos: 1
  runs_cron: 1
  configured_tags:
    genesis3: server
');


sub configuration_filter
{
    my $configured_profile_snippet = shift;

    # loop over all the given configuration snippets

    foreach my $configuration_filename (keys %$configured_profile_snippet)
    {
	# if this is a well-known filename

	if ($configuration_filename eq 'etc/neurospaces/developer/build.yml')
	{
	    # default: we don't remove anything

	    my $packages_to_be_removed = {};

	    # loop over all the packages in this configuration

	    my $build = $configured_profile->{$configuration_filename};

	    my $all_packages = $build->{all_packages};

	    foreach my $package_name (keys %$all_packages)
	    {
		my $package = $all_packages->{$package_name};

		# if this package is not a leader

		if ((not exists $package->{leader})
		    or (not $package->{leader}))
		{
		    # if we are not a server

		    if (not $global_profile_configuration->{profile}->{serves_repos})
# 		    if ($option_client)
		    {
			# filter the package by marking it as to be removed

			# note: leaves room for marking with 'disable' as alternative to 'remove'.

			$packages_to_be_removed->{$package_name} = 'remove';
		    }
		}
	    }

	    # loop over all the packages to be removed

	    foreach my $package_name_to_be_removed (keys %$packages_to_be_removed)
	    {
		# remove the package from the configuration

		if ($packages_to_be_removed->{$package_name_to_be_removed} eq 'remove')
		{
		    delete $all_packages->{$package_name_to_be_removed};
		}
	    }

	}
    }
}


sub main
{
    # read command line

    read_cmd_line();

    # upgrade the configurator package -- note that if the workspace
    # is already there, the selected branch is preserved, if the
    # workspace is not there yet, it will be created.

    try_to("neurospaces_create_directories --enable configurator configurator");

    try_to("neurospaces_pull --enable configurator configurator");

    # stop services

    if ($global_profile_configuration->{profile}->{runs_cron})
    {
	try_to("service cron stop");
    }

    if ($global_profile_configuration->{profile}->{serves_repos})
    {
	try_to("service neurospaces-servers stop");
    }

    # uninstall the previous installed packages

    try_to("neurospaces_dev_uninstall");

#     try_to("neurospaces_upgrade configurator");

    # go through all profiles to add

    foreach my $profile_name (@$option_profile_add)
    {
	# add the profile

	if ($option_verbose)
	{
	    print "$0: *** Adding profile $profile_name\n";
	}

	$global_profile_configuration->{profile}->{configured_tags}->{$profile_name} = "from $0";
    }

    # go through all profiles to remove

    foreach my $profile_name (@$option_profile_remove)
    {
	# remove the profile

	if ($option_verbose)
	{
	    print "$0: *** Removing profile $profile_name\n";
	}

	delete $global_profile_configuration->{profile}->{configured_tags}->{$profile_name};
    }

    # loop through all the profiles configured in the neurospaces profile configuration

    my $configured_tags = $global_profile_configuration->{profile}->{configured_tags};

    # use the server that is listed by neurospaces_repositories for the configurator package

    my $all_repositories = Neurospaces::Developer::packages();

    my $configurator_repository
	= [
	   grep
	   {
	       $_->{package} eq 'configurator';
	   }
	   @$all_repositories,
	  ];

    if (scalar @$configurator_repository ne 1)
    {
	die "$0: *** Error: ambiguous repository configuration for the Configurator package";
    }

    $configurator_repository = $configurator_repository->[0];

    # collect all the information of the repositories that need to be installed.
    # server machine: all of them included unconditionally
    # developer machine: only 'lead' repositories and managed repositories.

    # begin with an empty configured_profile (note: starting with an
    # empty profile allows to remove entries from an existing
    # configuration).

    my $configured_profile = {};

    my $multiple_configurator_branches = 0;

    # if we are using different branches of the configurator package

    if ($multiple_configurator_branches)
    {
	foreach my $configured_tag (keys %$configured_tags)
	{
	    # pull the configured_tag of the configurator.

	    try_to("cd ~/neurospaces_project/configurator/source/snapshots/0/ ; mtn pull $configurator_repository->{repository_server} '$configured_tag'");

	    # update the workspace for this branch

	    try_to("cd ~/neurospaces_project/configurator/source/snapshots/0/ ; mtn update --branch '$configured_tag'");

	    # find all configuration files

	    my $configuration_files
		= [
		   map
		   {
		       chomp; $_;
		   }
		   sort
		   `cd ~/neurospaces_project/configurator/source/snapshots/0/ && find etc/ -type f`,
		  ];

	    # collect information from its 'etc/neurospaces' configuration.

	    foreach my $configuration_file (@$configuration_files)
	    {
		# skip non yaml files

		if ($configuration_file ~! /\.yml$/)
		{
		    print STDERR "$0: *** Warning: in configured_tag $configured_tag: skipping a configuration file without .yml extension ($configuration_file)\n";

		    next;
		}

		# read the configuration file

		my $configuration = YAML::LoadFile("$ENV{HOME}/neurospaces_project/configurator/source/snapshots/0/" . $configuration_file);

		my $configured_profile_snippet = { $configuration_file => $configuration };

		# filter out what is only needed for the local PC: server machine or developer machine?

		configuration_filter($configured_profile_snippet);

		# merge the configuration in this file with the global configured profile

		my $merged_configuration = Data::Merger::merger($configured_profile, $configured_profile_snippet, );
	    }
	}
    }

    # else we are using only one branch of the configurator package

    # note: if using a global branch, that branch must contain and serve all files.

    else
    {
	# update the configurator workspace

	try_to("neurospaces_update --enable configurator configurator");

	# find all configuration files

	my $configuration_files
	    = [
	       map
	       {
		   chomp; $_;
	       }
	       sort
	       `cd ~/neurospaces_project/configurator/source/snapshots/0/ && find etc/ -type f`,
	      ];

	# loop over all the found configuration_files

	foreach my $configuration_file (@$configuration_files)
	{
	    # skip non yaml files

	    if ($configuration_file ~! /\.yml$/)
	    {
		print STDERR "$0: *** Warning: skipping a configuration file without .yml extension ($configuration_file)\n";

		next;
	    }

	    # read the configuration file

	    my $configuration = YAML::LoadFile("$ENV{HOME}/neurospaces_project/configurator/source/snapshots/0/" . $configuration_file);

	    my $configured_profile_snippet = { $configuration_file => $configuration };

	    # filter out what is only needed for the local PC: server machine or developer machine?

	    configuration_filter($configured_profile_snippet);

	    # merge the configuration in this file with the global configured profile

	    my $merged_configuration = Data::Merger::merger($configured_profile, $configured_profile_snippet, );
	}
    }

    # install the collected information to the '/etc/neurospaces' configuration.

    # loop over all the merged configuration files

    foreach my $configuration_filename (keys %$configured_profile)
    {
	# write the configuration to the configuration file: note that
	# this may require elevated permissions

	my $configuration = $configured_profile->{$configuration_filename};

	YAML::DumpFile("/$configuration_filename", $configuration);
    }

    # upgrade the neurospaces packages

    try_to("neurospaces_upgrade");

    # restart the services

    if ($global_profile_configuration->{profile}->{runs_cron})
    {
	try_to("service cron start");
    }

    if ($global_profile_configuration->{profile}->{serves_repos})
    {
	try_to("service neurospaces-servers start");
    }

}


sub read_cmd_line
{
    my $option_help = 0;
    my $option_version;

    my $result
	= GetOptions
	    (
	     "client!" => \$option_client,
	     "help!" => \$option_help,
	     "profile-add=s" => $option_profile_add,
	     "profile-directory=s" => \$option_profile_directory,
	     "profile-remove=s" => $option_profile_remove,
	     "verbose+" => \$option_verbose,
	     "version" => \$option_version,
	    );

    if (!$result)
    {
	die "$0: *** Error: Error in option processing";
    }

    if ($option_version)
    {
	my $version = version();

	print $version . "\n";

	exit 1;
    }

    # reporting options

    if ($option_help)
    {
	$0 =~ m(.*/(.*));

	my $program_name = $1;

	print
	    "

$program_name: configure a Neurospaces based target PC with a profile.
The profiles with those names will be merged and installed.

    --client                 configure as a client.
    --help                   print usage information.
    --profile-add            add this profile to the local machine, may be given multiple times.
    --profile-directory      the directory where to read and write profile information.
    --profile-remove         remove this profile from the local machine, may be given multiple times.
    --version                print version information.
    --v|verbose              tell what is being done, specify multiple times to get more feedback.
";

	exit 1;
    }

    my $profile_configuration_file = $option_profile_directory . "/profile.yml";

    if (-f $profile_configuration_file)
    {
# 	eval
# 	{
	    $global_profile_configuration = YAML::LoadFile($profile_configuration_file);
# 	};
    }
    else
    {
	$global_profile_configuration = $default_developer_profile_configuration;
    }
}


sub try_to
{
    my $command = shift;

    my $options = shift;

    my $allow_fail = $options->{allow_fail};

    my $verbose = $options->{verbose};

    if ($verbose)
    {
	print "---\n";
	print "$0: trying to $command\n";
    }

    my $output_path = $option_output_filename;

    #! $command executed in a subshell such that redirection applies
    #! to all commands.

    system "( $command ) >>$output_path 2>&1";

    if ($?)
    {
	if ($allow_fail)
	{
	    system "echo >>$output_path 2>&1 $0: *** Error: $command, $?\n";
	}
	else
	{
	    die "$0: *** Error: $command, $?";
	}
    }
}


sub version
{
    # $Format: "    my $version=\"${package}-${label}\";"$
    my $version="developer-alpha";

    return $version;
}


main();


