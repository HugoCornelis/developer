#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#


use strict;


use Getopt::Long;

use Neurospaces::Developer;

use YAML;


my $option_component_names = [];
my $option_documentation_set;
my $option_heterarch_set;
my $option_package_tags = [];
my $option_populate_only;
my $option_read_only;
my $option_repository_server;
my $option_verbose;


$SIG{'__DIE__'}
    = sub
      {
	  use Carp;

	  print STDERR Carp::longmess(@_);
      };


$SIG{'INT'}
    = sub
      {
	  use Carp;

	  print STDERR Carp::longmess(@_);
      };


sub main
{
    if ($option_verbose)
    {
	print "$0: Processing options\n";
    }

    read_cmd_line();

    if ($option_verbose)
    {
	print "$0: creating new components\n";
    }

    foreach my $component_name (@$option_component_names)
    {
	if ($option_verbose)
	{
	    print "$0: creating neurospaces component $component_name\n";
	}

	# if this component has a known configuration (but maybe no workspace)

	my $build_database_yaml = `neurospaces_build --help-all`;

	my $build_database = Load($build_database_yaml);

	my $all_packages = $build_database->{all_packages};

	if (exists $all_packages->{$component_name})
	{
	    # and we are not only populating the workspace

	    if (not $option_populate_only)
	    {
		# we don't do this, bail out.

		print "$0: *** Error: $component_name is already configured, not proceeding\n";

		next;
	    }

	    # only populating the workspace

	    else
	    {
		# will continue below
	    }
	}

	# if this component already has a workspace (but maybe it is not configured)

	if (-e "$ENV{HOME}/neurospaces_project/$component_name")
	{
	    # we don't do this, bail out.

	    print "$0: *** Error: $component_name has a workspace, not proceeding\n";

	    next;
	}

	# assume we don't have to overwrite the local configuration

	my $write_configuration = '';

	# if the repository server and port was set

	my $repository_port;
	my $repository_server;

	if ($option_repository_server)
	{
	    # configure the new component with the given server and port and make the new component available to the developer tools.

	    if ($option_verbose)
	    {
		print "$0: creating configuration for $component_name based on the given option_repository_server $option_repository_server\n";
	    }

	    $option_repository_server =~ /(.+):(.+)/;

	    $repository_port = $2;
	    $repository_server = $1;

	    if (! defined $repository_port
		or ! defined $repository_server)
	    {
		die "$0: *** Error: for component $component_name: repository_server or repository_port is not defined";
	    }

	    # first use the standard developer APIs to check if this configuration is valid

	    my $all_packages = $Neurospaces::Developer::Configurator::default_packages;

	    $all_packages->{$component_name}
		= {
		   ($option_heterarch_set ? (dependencies => { heterarch => 'configured using $0', }) : ()),
		   version_control => {
				       port_number => $repository_port,
				       server => $repository_server,
				      },
		  };

	    my $error = Neurospaces::Developer::Configurator::packages_validate($all_packages);

	    if (defined $error)
	    {
		die "$0: *** Error: for component $component_name: $error";
	    }

	    # this configuration is valid, register that we have to write the new configuration

	    $write_configuration = " option_repository_server $option_repository_server";
	}

	# if the package was marked as read-only

	if ($option_read_only)
	{
	    # make sure the configuration is overwritten.

	    $write_configuration .= " option_read_only $option_read_only";
	}

	# if we are only populating the workspace

	if ($option_populate_only)
	{
	    if ($option_verbose)
	    {
		print "$0: only populating with files, not changing the configuration\n";
	    }

	    # we never write a configuration

	    $write_configuration =  '';
	}

	# if we are writing a new configuration

	if ($write_configuration)
	{
	    # write the new configuration to the global configuration file

	    my $build_database_filename = "/etc/neurospaces/developer/build.yml";

	    use YAML;

	    my $build_database = YAML::LoadFile($build_database_filename);

	    $build_database->{all_packages}->{$component_name}
		= {
		   ($option_read_only ? ( read_only => $option_read_only ) : ()),
		   (scalar @$option_package_tags ? (tags => $option_package_tags) : ()),
		   ($option_repository_server ?
		    (
		     version_control => {
					 port_number => $repository_port,
					 server => $repository_server,
					},
		    )
		    : ()),
		  };

	    YAML::DumpFile($build_database_filename, $build_database);
	}

	# for a new component that is not read-only

	if (not $option_read_only)
	{
	    # produce a template that allows to start new development

	    if ($option_verbose)
	    {
		print "$0: creating neurospaces component $component_name\'s directories and files as a template to conveniently start development\n";
	    }

	    system "mkdir -p '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0'";

	    system "mkdir -p '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/perl'";

	    system "mkdir -p '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/python'";

	    system "mkdir -p '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/python/neurospaces'";

	    system "mkdir -p '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/install/rpm'";

	    system "mkdir -p '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/tests'";

	    system "mkdir -p '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/docs'";

	    system "mkdir -p '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/bin'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/autogen.sh' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/python/neurospaces/__cbi__.py' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/python/neurospaces'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/tests/introduction.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/tests/introduction.html'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/install/rpm/developer.spec' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/install/rpm/$component_name.spec'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/TODO.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/TODO.txt'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/COPYING' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/license.txt' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/tests.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/tests.config'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/configure.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/configure.ac'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/Makefile.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/Makefile.am'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/bin/neurospaces_template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/bin/$component_name'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/release-expand.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/release-expand.config'";

	    system "perl -e 's/__component_name__/$component_name/sg' -pi '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/release-expand.config'";

	    system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/.mtn-ignore.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/.mtn-ignore'";

	    system "perl -e 's/__component_name__/$component_name/sg' -pi '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/.mtn-ignore'";

	    if (not $option_populate_only)
	    {
		# initialize the repository

		if ($option_verbose)
		{
		    print "$0: creating repository for $component_name based on the existing configuration\n";
		}

		system "neurospaces_init '$component_name'";

		# initialize the workspace, the interface with the repository

		if ($option_verbose)
		{
		    print "$0: creating workspace for $component_name based on the existing configuration\n";
		}

		system "neurospaces_setup '$component_name'";
	    }
	    else
	    {
		if ($option_verbose)
		{
		    print "$0: only populating with files, not creating the repository nor the workspace\n";
		}

	    }

	    # if this is a documentation set

	    if ($option_documentation_set)
	    {
		if ($option_verbose)
		{
		    print "$0: creating documentation_set workspace files for $component_name\n";
		}

		# copy new document

		system "cp -a '$ENV{HOME}/neurospaces_project/userdocs/source/snapshots/0/NewDocument' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/NewDocument'";

		# copy makefile template that installs the documentation build scripts

		system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/Makefile.documentation.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/Makefile.am'";

		system "perl -e 's/__component_name__/$component_name/sg' -pi '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/Makefile.am'";

		# copy tool scripts for automation of operations such as syncs

		system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/documentation-sync.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/bin/$component_name-sync'";

		system "perl -e 's/__component_name__/$component_name/sg' -pi '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/bin/$component_name-sync'";

		system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/documentation-version.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/bin/$component_name-version'";

		system "perl -e 's/__component_name__/$component_name/sg' -pi '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/bin/$component_name-version'";

	    }

	    # if this is a heterarch set

	    if ($option_heterarch_set)
	    {
		if ($option_verbose)
		{
		    print "$0: creating heterarch_set workspace files for $component_name\n";
		}

		# copy new document

		system "cp -a '$ENV{HOME}/neurospaces_project/heterarch/source/snapshots/0/NewDocument' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/NewDocument'";

		# copy makefile template that installs the documentation build scripts

		system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/Makefile.heterarch.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/Makefile.am'";

		system "perl -e 's/__component_name__/$component_name/sg' -pi '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/Makefile.am'";

		# copy tool scripts for automation of operations such as syncs

		system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/documentation-sync.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/bin/$component_name-sync'";

		system "perl -e 's/__component_name__/$component_name/sg' -pi '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/bin/$component_name-sync'";

		system "cp -a '$ENV{HOME}/neurospaces_project/developer/source/snapshots/0/documentation-version.template' '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/bin/$component_name-version'";

		system "perl -e 's/__component_name__/$component_name/sg' -pi '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/bin/$component_name-version'";

	    }

	    # initialize keywords based on their current expansion

	    if ($option_verbose)
	    {
		print "$0: initializing keywords for $component_name\n";
	    }

	    system "cd '$ENV{HOME}/neurospaces_project/$component_name/source/snapshots/0/' ; release-expand";
	}
	else
	{
	    # let the user know that a developer's template was not generated

	    print "$0: NOT creating a developer's workspace for neurospaces component $component_name, instead try pulling its code from the server and then installing it.\n";
	}
    }

}


sub read_cmd_line
{
    my $option_help;

    my $result
	= GetOptions
	    (
	     "component-name=s" => $option_component_names,
	     "documentation-set!" => \$option_documentation_set,
	     "help" => \$option_help,
	     "heterarch-set!" => \$option_heterarch_set,
	     "package-tags=s" => $option_package_tags,
	     "populate-only!" => \$option_populate_only,
	     "read-only=s" => \$option_read_only,
	     "repository-server=s" => \$option_repository_server,
	     "v|verbose+" => \$option_verbose,
	    );

    if ($option_help
	|| scalar @ARGV
	|| ! scalar @$option_component_names)
    {
	print
	    "
$0: create new neurospaces component source trees.

Example usage 1:

To create the workspace of a new component from pre-existing sources:

$0 --populate-only --component-name ucatchit --verbose

Then copy the pre-existing sources to the created directory, optionally followed by

neurospaces_init ucatchit
neurospaces_setup ucatchit


Example usage 2:

To create a new repository to be served from the internet:

$0 --component-name ucatchit --repository-server 91.183.94.6:65537 --package-tags 'Neurospaces-Development' --verbose


options:
    --component-name     set component name to create, may be used one or more times.
    --documentation-set  create the new components as documentation sets.
    --help               print usage information.
    --heterarch-set      create the new components as heterarch sets.
    --package-tags       add this package tag to each new component configuration (may be given multiple times).
    --populate-only      only populate the workspace but do not initialize the repository.
                         note that an pre-existing workspace cancels the operation (remove your workspace if required).
    --read-only          explains why this package is locally read-only (eg. you don't have permission to sync to the server).
    --repository-server  use the given server to configure the new component (eg. repo-genesis3.cbi.utsa.edu:4696).
    --verbose            set verbosity level.
";

	exit 1;
    }

    if (!$result)
    {
	die "$0: *** Error: Error in option processing";
    }

}


main();


